import fastf1
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error

# Enable FastF1 caching
fastf1.Cache.enable_cache("f1_cache")

# Load FastF1 2024 Australian GP race session
session_2024 = fastf1.get_session(2024, 3, "R")
session_2024.load()

# Extract lap times
laps_2024 = session_2024.laps[[
    "Driver", "LapTime", "LapNumber", "Stint", "Compound", "TrackStatus", "IsAccurate"
]].copy()

# Clean data
laps_2024.dropna(subset=["LapTime"], inplace=True)
laps_2024 = laps_2024[laps_2024["IsAccurate"] == True]  # keep only reliable laps
laps_2024["LapTime (s)"] = laps_2024["LapTime"].dt.total_seconds()

# Convert tyre compounds into numeric codes
laps_2024["Compound"] = laps_2024["Compound"].map({"SOFT": 0, "MEDIUM": 1, "HARD": 2})
# Fill any missing values with -1 (just in case)
laps_2024["Compound"] = laps_2024["Compound"].fillna(-1)

# Track status: 1 if green flag, 0 if otherwise. We only want to count lap times under green conditions
laps_2024["TrackGreen"] = (laps_2024["TrackStatus"] == "1").astype(int)

# 2025 Qualifying Data
qualifying_2025 = pd.DataFrame({
    "Driver": ["Lando Norris", "Oscar Piastri", "Max Verstappen", "George Russell", "Yuki Tsunoda",
               "Alexander Albon", "Charles Leclerc", "Lewis Hamilton", "Pierre Gasly", "Carlos Sainz", "Fernando Alonso", "Lance Stroll"],
    "QualifyingTime (s)": [75.096, 75.180, 75.481, 75.546, 75.670,
                           75.737, 75.755, 75.973, 75.980, 76.062, 76.4, 76.5]
})

# Map full names to FastF1 3-letter codes
driver_mapping = {
    "Lando Norris": "NOR", "Oscar Piastri": "PIA", "Max Verstappen": "VER", "George Russell": "RUS",
    "Yuki Tsunoda": "TSU", "Alexander Albon": "ALB", "Charles Leclerc": "LEC", "Lewis Hamilton": "HAM",
    "Pierre Gasly": "GAS", "Carlos Sainz": "SAI", "Lance Stroll": "STR", "Fernando Alonso": "ALO"
}

qualifying_2025["DriverCode"] = qualifying_2025["Driver"].map(driver_mapping)

# Merge 2025 Qualifying Data with 2024 Race Data
merged_data = qualifying_2025.merge(laps_2024, left_on="DriverCode", right_on="Driver")

# Use only "QualifyingTime (s)" as a feature
X = merged_data[[
    "QualifyingTime (s)", "LapNumber", "Stint", "Compound", "TrackGreen"
]]
y = merged_data["LapTime (s)"]

if X.shape[0] == 0:
    raise ValueError("Dataset is empty after preprocessing. Check data sources!")

# Train Gradient Boosting Model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=39)
model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.05, random_state=39)
model.fit(X_train, y_train)

# For 2025 predictions, we donâ€™t know lap number/tyre/etc.

# So we assume average stint/lap/tyre conditions
# Make sure these columns exist before prediction
qualifying_2025["LapNumber"] = 20
qualifying_2025["Stint"] = 2
qualifying_2025["Compound"] = 1
qualifying_2025["TrackGreen"] = 1

# Predict using all features
predicted_lap_times = model.predict(qualifying_2025[["QualifyingTime (s)", "LapNumber", "Stint", "Compound", "TrackGreen"]])
qualifying_2025["PredictedRaceTime (s)"] = predicted_lap_times

# Rank drivers by predicted race time
qualifying_2025 = qualifying_2025.sort_values(by="PredictedRaceTime (s)")

# Print final predictions
print(" Predicted 2025 Chinese GP Winner ")
print(qualifying_2025[["Driver", "PredictedRaceTime (s)"]])

# Evaluate Model
y_pred = model.predict(X_test)
print(f" Model Error (MAE): {mean_absolute_error(y_test, y_pred):.2f} seconds")
